// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hubupdaterservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HubUpdaterServiceClient is the client API for HubUpdaterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubUpdaterServiceClient interface {
	UpdateStatusEvents(ctx context.Context, opts ...grpc.CallOption) (HubUpdaterService_UpdateStatusEventsClient, error)
}

type hubUpdaterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHubUpdaterServiceClient(cc grpc.ClientConnInterface) HubUpdaterServiceClient {
	return &hubUpdaterServiceClient{cc}
}

func (c *hubUpdaterServiceClient) UpdateStatusEvents(ctx context.Context, opts ...grpc.CallOption) (HubUpdaterService_UpdateStatusEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HubUpdaterService_serviceDesc.Streams[0], "/hubupdaterservice.HubUpdaterService/UpdateStatusEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubUpdaterServiceUpdateStatusEventsClient{stream}
	return x, nil
}

type HubUpdaterService_UpdateStatusEventsClient interface {
	Send(*UpdateStatusEventsRequest) error
	CloseAndRecv() (*UpdateStatusEventsResponse, error)
	grpc.ClientStream
}

type hubUpdaterServiceUpdateStatusEventsClient struct {
	grpc.ClientStream
}

func (x *hubUpdaterServiceUpdateStatusEventsClient) Send(m *UpdateStatusEventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubUpdaterServiceUpdateStatusEventsClient) CloseAndRecv() (*UpdateStatusEventsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateStatusEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HubUpdaterServiceServer is the server API for HubUpdaterService service.
// All implementations must embed UnimplementedHubUpdaterServiceServer
// for forward compatibility
type HubUpdaterServiceServer interface {
	UpdateStatusEvents(HubUpdaterService_UpdateStatusEventsServer) error
	mustEmbedUnimplementedHubUpdaterServiceServer()
}

// UnimplementedHubUpdaterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHubUpdaterServiceServer struct {
}

func (*UnimplementedHubUpdaterServiceServer) UpdateStatusEvents(HubUpdaterService_UpdateStatusEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateStatusEvents not implemented")
}
func (*UnimplementedHubUpdaterServiceServer) mustEmbedUnimplementedHubUpdaterServiceServer() {}

func RegisterHubUpdaterServiceServer(s *grpc.Server, srv HubUpdaterServiceServer) {
	s.RegisterService(&_HubUpdaterService_serviceDesc, srv)
}

func _HubUpdaterService_UpdateStatusEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubUpdaterServiceServer).UpdateStatusEvents(&hubUpdaterServiceUpdateStatusEventsServer{stream})
}

type HubUpdaterService_UpdateStatusEventsServer interface {
	SendAndClose(*UpdateStatusEventsResponse) error
	Recv() (*UpdateStatusEventsRequest, error)
	grpc.ServerStream
}

type hubUpdaterServiceUpdateStatusEventsServer struct {
	grpc.ServerStream
}

func (x *hubUpdaterServiceUpdateStatusEventsServer) SendAndClose(m *UpdateStatusEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubUpdaterServiceUpdateStatusEventsServer) Recv() (*UpdateStatusEventsRequest, error) {
	m := new(UpdateStatusEventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HubUpdaterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hubupdaterservice.HubUpdaterService",
	HandlerType: (*HubUpdaterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateStatusEvents",
			Handler:       _HubUpdaterService_UpdateStatusEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "hubupdaterservice.proto",
}

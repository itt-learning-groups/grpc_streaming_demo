// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package namesservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NamesServiceClient is the client API for NamesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamesServiceClient interface {
	GetNames(ctx context.Context, in *GetNamesRequest, opts ...grpc.CallOption) (NamesService_GetNamesClient, error)
}

type namesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamesServiceClient(cc grpc.ClientConnInterface) NamesServiceClient {
	return &namesServiceClient{cc}
}

func (c *namesServiceClient) GetNames(ctx context.Context, in *GetNamesRequest, opts ...grpc.CallOption) (NamesService_GetNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NamesService_serviceDesc.Streams[0], "/namesservice.NamesService/GetNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &namesServiceGetNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NamesService_GetNamesClient interface {
	Recv() (*GetNamesResponse, error)
	grpc.ClientStream
}

type namesServiceGetNamesClient struct {
	grpc.ClientStream
}

func (x *namesServiceGetNamesClient) Recv() (*GetNamesResponse, error) {
	m := new(GetNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NamesServiceServer is the server API for NamesService service.
// All implementations must embed UnimplementedNamesServiceServer
// for forward compatibility
type NamesServiceServer interface {
	GetNames(*GetNamesRequest, NamesService_GetNamesServer) error
	mustEmbedUnimplementedNamesServiceServer()
}

// UnimplementedNamesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNamesServiceServer struct {
}

func (*UnimplementedNamesServiceServer) GetNames(*GetNamesRequest, NamesService_GetNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNames not implemented")
}
func (*UnimplementedNamesServiceServer) mustEmbedUnimplementedNamesServiceServer() {}

func RegisterNamesServiceServer(s *grpc.Server, srv NamesServiceServer) {
	s.RegisterService(&_NamesService_serviceDesc, srv)
}

func _NamesService_GetNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamesServiceServer).GetNames(m, &namesServiceGetNamesServer{stream})
}

type NamesService_GetNamesServer interface {
	Send(*GetNamesResponse) error
	grpc.ServerStream
}

type namesServiceGetNamesServer struct {
	grpc.ServerStream
}

func (x *namesServiceGetNamesServer) Send(m *GetNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NamesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "namesservice.NamesService",
	HandlerType: (*NamesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNames",
			Handler:       _NamesService_GetNames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "namessvc.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package talkingservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TalkingServiceClient is the client API for TalkingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TalkingServiceClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (TalkingService_ChatClient, error)
}

type talkingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkingServiceClient(cc grpc.ClientConnInterface) TalkingServiceClient {
	return &talkingServiceClient{cc}
}

func (c *talkingServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (TalkingService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TalkingService_serviceDesc.Streams[0], "/talkingservice.TalkingService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &talkingServiceChatClient{stream}
	return x, nil
}

type TalkingService_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type talkingServiceChatClient struct {
	grpc.ClientStream
}

func (x *talkingServiceChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *talkingServiceChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TalkingServiceServer is the server API for TalkingService service.
// All implementations must embed UnimplementedTalkingServiceServer
// for forward compatibility
type TalkingServiceServer interface {
	Chat(TalkingService_ChatServer) error
	mustEmbedUnimplementedTalkingServiceServer()
}

// UnimplementedTalkingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTalkingServiceServer struct {
}

func (*UnimplementedTalkingServiceServer) Chat(TalkingService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (*UnimplementedTalkingServiceServer) mustEmbedUnimplementedTalkingServiceServer() {}

func RegisterTalkingServiceServer(s *grpc.Server, srv TalkingServiceServer) {
	s.RegisterService(&_TalkingService_serviceDesc, srv)
}

func _TalkingService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TalkingServiceServer).Chat(&talkingServiceChatServer{stream})
}

type TalkingService_ChatServer interface {
	Send(*ChatResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type talkingServiceChatServer struct {
	grpc.ServerStream
}

func (x *talkingServiceChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *talkingServiceChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TalkingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "talkingservice.TalkingService",
	HandlerType: (*TalkingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _TalkingService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "talkingservice.proto",
}
